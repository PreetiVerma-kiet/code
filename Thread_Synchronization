class Booking {
	int total_books=10;
	 public void issueBooks(int books){
	
		if(total_books>= books) {
			System.out.println("books issued successfully");
			total_books-= books;
		
			System.out.println("books left"+total_books);
			
		}
		else {
			System.out.println("bookes can not be issued");
			System.out.println("total left books is" + total_books);
		}
				}

}
public class BookIssueApp extends Thread{
	static Booking b;
	int No_Books;
	public void run() {
		b.issueBooks(No_Books);
		}
	public static void main(String args[]) {
		b=new Booking();
		BookIssueApp t1 =new BookIssueApp();
		BookIssueApp t2 =new BookIssueApp();
		t1.No_Books=7;
		t2.No_Books=8;
		t1.start();
		t2.start();
		
	}
	
}
------------------------------------------------------------------Thread Inter Communication-----------------------------------------------------------------

lass SharedData {
    int number;
    boolean available = false;

    synchronized void produce(int value) {
        try {
            while (available) {
                wait(); // Wait until the number is consumed
            }
            number = value;
            available = true;
            System.out.println("Produced: " + number);
            notify(); // Notify the consumer
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    synchronized void consume() {
        try {
            while (!available) {
                wait(); // Wait until the number is produced
            }
            System.out.println("Consumed: " + number);
            available = false;
            notify(); // Notify the producer
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

public class InterThreadCommunicationExample {
    public static void main(String[] args) {
        SharedData data = new SharedData();

        Thread producer = new Thread(() -> {
            for (int i = 1; i <= 5; i++) {
                data.produce(i);
            }
        });

        Thread consumer = new Thread(() -> {
            for (int i = 1; i <= 5; i++) {
                data.consume();
            }
        });

        producer.start();
        consumer.start();
    }
}

